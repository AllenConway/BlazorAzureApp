name: Build and Deploy to Azure

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: |
        dotnet publish -c Release -o ${{ github.workspace }}/publish \
          --self-contained false \
          /p:EnvironmentName=Production

    - name: Generate deployment package
      run: |
        cd ${{ github.workspace }}/publish
        zip -r ${{ github.workspace }}/app.zip .

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-app
        path: ${{ github.workspace }}/publish

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Make import script executable
      run: chmod +x ./terraform/import.sh
      
    - name: Import existing resources
      run: ./import.sh ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'BlazorAzureWebApp'
        package: ${{ github.workspace }}/app.zip

    - name: Check deployment status
      run: |
        APP_URL="https://blazorazurewebapp.azurewebsites.net"
        echo "Waiting for application to warm up..."
        sleep 60  # Increased initial wait time
        
        MAX_RETRIES=10  # Increased retries
        RETRY_COUNT=0
        
        until curl -sSf "$APP_URL" > /dev/null 2>&1 || [ $RETRY_COUNT -eq $MAX_RETRIES ]
        do
          echo "Attempt $((RETRY_COUNT+1)) of $MAX_RETRIES - Waiting for application..."
          sleep 30
          RETRY_COUNT=$((RETRY_COUNT+1))
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Deployment verification failed after $MAX_RETRIES attempts"
          curl -v "$APP_URL"  # Add verbose output on failure
          exit 1
        fi